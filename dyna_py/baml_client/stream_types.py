# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from pydantic import BaseModel, ConfigDict

import baml_py

from . import types

StreamStateValueT = typing.TypeVar('StreamStateValueT')
class StreamState(BaseModel, typing.Generic[StreamStateValueT]):
    value: StreamStateValueT
    state: typing_extensions.Literal["Pending", "Incomplete", "Complete"]
# #########################################################################
# Generated classes (10)
# #########################################################################

class Completion(BaseModel):
    policy: typing.Optional[typing.Union[types.CompletionPolicy, str]] = None
    k: typing.Optional[int] = None

class ConstrainedTask(BaseModel):
    id: typing.Optional[str] = None
    title: typing.Optional[str] = None
    description: typing.Optional[str] = None
    taskType: typing.Optional[types.TaskType] = None
    executionMode: typing.Optional[typing.Union[types.ExecutionMode, str]] = None
    subtasks: typing.List["ConstrainedTask"]
    dependsOn: typing.Optional[typing.List[str]] = None
    inputPorts: typing.Optional[typing.List["Port"]] = None
    outputPorts: typing.Optional[typing.List["Port"]] = None
    completion: typing.Optional["Completion"] = None
    agentId: typing.Optional[str] = None
    guard: typing.Optional[str] = None

class ConstrainedTaskGraph(BaseModel):
    tasks: typing.Optional[typing.List["ConstrainedTask"]] = None
    roots: typing.Optional[typing.List[str]] = None
    edges: typing.Optional[typing.List["DataEdge"]] = None

class DataEdge(BaseModel):
    fromTaskId: typing.Optional[str] = None
    fromPort: typing.Optional[str] = None
    toTaskId: typing.Optional[str] = None
    toPort: typing.Optional[str] = None

class Port(BaseModel):
    name: typing.Optional[str] = None
    type: typing.Optional[str] = None
    required: typing.Optional[bool] = None

class Response(BaseModel):
    can_the_question_be_answered: typing.Optional[bool] = None
    raionale: typing.Optional[str] = None

class StepFrameIn(BaseModel):
    context: typing.Optional[str] = None
    guidance: typing.Optional[str] = None

class StepFrameOut(BaseModel):
    status: typing.Optional[types.GenericStepOutStatus] = None
    control: typing.Optional[types.GenericStepOutControl] = None
    reason: typing.Optional[str] = None
    hint: typing.Optional[str] = None
    text: typing.Optional[str] = None
    payload: typing.Optional[str] = None
    context_delta: typing.Optional[str] = None

class Task(BaseModel):
    id: typing.Optional[str] = None
    title: typing.Optional[str] = None
    description: typing.Optional[str] = None
    executionMode: typing.Optional[typing.Union[types.ExecutionMode, str]] = None
    subtasks: typing.Optional[typing.List["Task"]] = None
    dependsOn: typing.Optional[typing.List[str]] = None
    inputPorts: typing.Optional[typing.List["Port"]] = None
    outputPorts: typing.Optional[typing.List["Port"]] = None
    completion: typing.Optional["Completion"] = None
    agentId: typing.Optional[str] = None
    guard: typing.Optional[str] = None

class TaskGraph(BaseModel):
    tasks: typing.List["Task"]
    roots: typing.Optional[typing.List[str]] = None
    edges: typing.Optional[typing.List["DataEdge"]] = None

# #########################################################################
# Generated type aliases (0)
# #########################################################################

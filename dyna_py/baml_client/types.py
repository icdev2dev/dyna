# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from enum import Enum


from pydantic import BaseModel, ConfigDict


import baml_py

CheckT = typing_extensions.TypeVar('CheckT')
CheckName = typing_extensions.TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str
class Checked(BaseModel, typing.Generic[CheckT, CheckName]):
    value: CheckT
    checks: typing.Dict[CheckName, Check]

def get_checks(checks: typing.Dict[CheckName, Check]) -> typing.List[Check]:
    return list(checks.values())

def all_succeeded(checks: typing.Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))
# #########################################################################
# Generated enums (6)
# #########################################################################

class CompletionPolicy(str, Enum):
    AllSubtasks = "AllSubtasks"
    AnySubtask = "AnySubtask"
    KOfN = "KOfN"

class ExecutionMode(str, Enum):
    Sequential = "Sequential"
    Parallel = "Parallel"

class GenericStepOutControl(str, Enum):
    CONTINUE = "CONTINUE"
    PAUSE = "PAUSE"
    STOP = "STOP"
    DONE = "DONE"

class GenericStepOutStatus(str, Enum):
    OK = "OK"
    ERR = "ERR"

class RegisteredWindow(str, Enum):
    AgentConfigsWindow = "AgentConfigsWindow"
    AgentsListWindow = "AgentsListWindow"
    ConversationsWindow = "ConversationsWindow"

class TaskType(str, Enum):
    NA = "NA"
    TRANSLATION = "TRANSLATION"
    LOCALIZATION = "LOCALIZATION"

# #########################################################################
# Generated classes (10)
# #########################################################################

class Completion(BaseModel):
    policy: typing.Union[CompletionPolicy, str]
    k: typing.Optional[int] = None

class ConstrainedTask(BaseModel):
    id: str
    title: typing.Optional[str] = None
    description: typing.Optional[str] = None
    taskType: TaskType
    executionMode: typing.Union[ExecutionMode, str]
    subtasks: typing.List["ConstrainedTask"]
    dependsOn: typing.Optional[typing.List[str]] = None
    inputPorts: typing.Optional[typing.List["Port"]] = None
    outputPorts: typing.Optional[typing.List["Port"]] = None
    completion: typing.Optional["Completion"] = None
    agentId: typing.Optional[str] = None
    guard: typing.Optional[str] = None

class ConstrainedTaskGraph(BaseModel):
    tasks: typing.Optional[typing.List["ConstrainedTask"]] = None
    roots: typing.Optional[typing.List[str]] = None
    edges: typing.Optional[typing.List["DataEdge"]] = None

class DataEdge(BaseModel):
    fromTaskId: str
    fromPort: str
    toTaskId: str
    toPort: str

class Port(BaseModel):
    name: str
    type: str
    required: typing.Optional[bool] = None

class Response(BaseModel):
    can_the_question_be_answered: bool
    raionale: str

class StepFrameIn(BaseModel):
    context: str
    guidance: str

class StepFrameOut(BaseModel):
    status: typing.Optional[GenericStepOutStatus] = None
    control: typing.Optional[GenericStepOutControl] = None
    reason: typing.Optional[str] = None
    hint: typing.Optional[str] = None
    text: typing.Optional[str] = None
    payload: typing.Optional[str] = None
    context_delta: typing.Optional[str] = None

class Task(BaseModel):
    id: str
    title: typing.Optional[str] = None
    description: typing.Optional[str] = None
    executionMode: typing.Union[ExecutionMode, str]
    subtasks: typing.Optional[typing.List["Task"]] = None
    dependsOn: typing.Optional[typing.List[str]] = None
    inputPorts: typing.Optional[typing.List["Port"]] = None
    outputPorts: typing.Optional[typing.List["Port"]] = None
    completion: typing.Optional["Completion"] = None
    agentId: typing.Optional[str] = None
    guard: typing.Optional[str] = None

class TaskGraph(BaseModel):
    tasks: typing.List["Task"]
    roots: typing.Optional[typing.List[str]] = None
    edges: typing.Optional[typing.List["DataEdge"]] = None

# #########################################################################
# Generated type aliases (0)
# #########################################################################

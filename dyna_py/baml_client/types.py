# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from enum import Enum


from pydantic import BaseModel, ConfigDict


import baml_py

CheckT = typing_extensions.TypeVar('CheckT')
CheckName = typing_extensions.TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str
class Checked(BaseModel, typing.Generic[CheckT, CheckName]):
    value: CheckT
    checks: typing.Dict[CheckName, Check]

def get_checks(checks: typing.Dict[CheckName, Check]) -> typing.List[Check]:
    return list(checks.values())

def all_succeeded(checks: typing.Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))
# #########################################################################
# Generated enums (2)
# #########################################################################

class GenericStepOutControl(str, Enum):
    CONTINUE = "CONTINUE"
    PAUSE = "PAUSE"
    STOP = "STOP"
    DONE = "DONE"

class GenericStepOutStatus(str, Enum):
    OK = "OK"
    ERR = "ERR"

# #########################################################################
# Generated classes (8)
# #########################################################################

class MonikerData(BaseModel):
    topic: typing.Optional[str] = None

class MonikerGuidance(BaseModel):
    topic: typing.Optional[str] = None
    style: typing.Optional[str] = None

class MonikerState(BaseModel):
    topic: typing.Optional[str] = None
    last_style: typing.Optional[str] = None
    last_output: typing.Optional[str] = None

class MonikerStepFrameIn(BaseModel):
    step: str
    state: "MonikerState"
    guidance: typing.Optional["MonikerGuidance"] = None

class MonikerStepFrameOut(BaseModel):
    step: str
    state: "MonikerState"
    next_step: str
    text: str
    data: "MonikerData"
    done: bool
    notes: typing.Optional[str] = None

class Response(BaseModel):
    can_the_question_be_answered: bool
    raionale: str

class StepFrameIn(BaseModel):
    context: str
    guidance: str

class StepFrameOut(BaseModel):
    status: typing.Optional[GenericStepOutStatus] = None
    control: typing.Optional[GenericStepOutControl] = None
    reason: typing.Optional[str] = None
    hint: typing.Optional[str] = None
    text: typing.Optional[str] = None
    payload: typing.Optional[str] = None
    context_delta: typing.Optional[str] = None

# #########################################################################
# Generated type aliases (0)
# #########################################################################
